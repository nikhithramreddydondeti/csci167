python
# Imports math library
import numpy as np
# Imports plotting library
import matplotlib.pyplot as plt
# Imports math library
import math
```

---

### Zaslavsky’s formula for number of regions

```python
def number_regions(Di, D):
    """
    Compute maximum number of linear regions for a shallow NN.
    Uses Zaslavsky's formula: N = sum_{j=0}^{Di} C(D, j)
    """
    if D < Di:
        # Special case: if hidden units fewer than input dims
        return 2**D
    N = 0
    for j in range(Di+1):
        N += math.comb(D, j)
    return N
```

---

### Test for small case (Di=2, D=3)

```python
# Calculate the number of regions for 2D input (Di=2) and 3 hidden units (D=3)
N = number_regions(2, 3)
print(f"Di=2, D=3, Number of regions = {int(N)}, True value = 7")
```

---

### Test for large case (Di=10, D=50)

```python
N = number_regions(10, 50)
print(f"Di=10, D=50, Number of regions = {int(N)}, True value = 13432735556")
```

---

### Case when D < Di

```python
try:
    N = number_regions(10, 8)
    print(f"Di=10, D=8, Number of regions = {int(N)}, True value = 256")
except Exception as error:
    print("An exception occurred:", error)
```

```python
# Double-check with the D=D trick
D = 8; Di = 10
N = np.power(2,D)
N2 = number_regions(D,D)
print(f"Di=10, D=8, Number of regions = {int(N)}, Number of regions = {int(N2)}, True value = 256")
```

---

### Plot (Figure 3.9a)

```python
dims = np.array([1,5,10,50,100])
regions = np.zeros((dims.shape[0], 1000))
for c_dim in range(dims.shape[0]):
    D_i = dims[c_dim]
    print (f"Counting regions for {D_i} input dimensions")
    for D in range(1000):
        regions[c_dim, D] = number_regions(np.min([D_i,D]), D)

fig, ax = plt.subplots()
ax.semilogy(regions[0,:],'k-')
ax.semilogy(regions[1,:],'b-')
ax.semilogy(regions[2,:],'m-')
ax.semilogy(regions[3,:],'c-')
ax.semilogy(regions[4,:],'y-')
ax.legend(['$D_i$=1', '$D_i$=5', '$D_i$=10', '$D_i$=50', '$D_i$=100'])
ax.set_xlabel("Number of hidden units, D")
ax.set_ylabel("Number of regions, N")
plt.xlim([0,1000])
plt.ylim([1e1,1e150])
plt.show()
```

---

### Number of parameters

For a shallow NN with:

* input dimension = `D_i`
* hidden units = `D`
* one output neuron

Each hidden unit has `D_i` weights + 1 bias = `D_i+1` parameters.
So for `D` hidden units → `D * (D_i+1)` parameters.
The output neuron has `D` weights + 1 bias.
**Total = D*(D\_i+1) + (D+1) = D\_i*D + 2D + 1\*\*

```python
def number_parameters(D_i, D):
    """
    Compute number of parameters in a shallow NN with one output.
    """
    return D_i*D + 2*D + 1
```

---

### Test parameter count

```python
N = number_parameters(10, 8)
print(f"Di=10, D=8, Number of parameters = {int(N)}, True value = 97")
```

---

### Plot (Figure 3.9b)

```python
dims = np.array([1,5,10,50,100])
regions = np.zeros((dims.shape[0], 200))
params = np.zeros((dims.shape[0], 200))

for c_dim in range(dims.shape[0]):
    D_i = dims[c_dim]
    print (f"Counting regions for {D_i} input dimensions")
    for c_hidden in range(1, 200):
        D = int(c_hidden * 500 / D_i)  # scaled
        params[c_dim, c_hidden] = number_parameters(D_i, D)
        regions[c_dim, c_hidden] = number_regions(np.min([D_i,D]), D)

fig, ax = plt.subplots()
ax.semilogy(params[0,:], regions[0,:],'k-')
ax.semilogy(params[1,:], regions[1,:],'b-')
ax.semilogy(params[2,:], regions[2,:],'m-')
ax.semilogy(params[3,:], regions[3,:],'c-')
ax.semilogy(params[4,:], regions[4,:],'y-')
ax.legend(['$D_i$=1', '$D_i$=5', '$D_i$=10', '$D_i$=50', '$D_i$=100'])
ax.set_xlabel("Number of parameters")
ax.set_ylabel("Number of regions, N")
plt.xlim([0,100000])
plt.ylim([1e1,1e150])
plt.show()


