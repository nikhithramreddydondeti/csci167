# Imports
import numpy as np
import matplotlib.pyplot as plt

# -----------------------------
# Activation functions
# -----------------------------
def ReLU(preactivation):
    return preactivation.clip(min=0)

def sigmoid(preactivation):
    return 1 / (1 + np.exp(-preactivation))

def tanh(preactivation):
    return np.tanh(preactivation)

# -----------------------------
# Shallow Neural Network (1 input → 3 hidden → 1 output)
# -----------------------------
def shallow_1_1_3(x, activation_fn, phi_0,phi_1,phi_2,phi_3,
                  theta_10, theta_11, theta_20, theta_21, theta_30, theta_31):

    # pre-activations
    pre_1 = theta_10 + theta_11 * x
    pre_2 = theta_20 + theta_21 * x
    pre_3 = theta_30 + theta_31 * x

    # activations
    act_1 = activation_fn(pre_1)
    act_2 = activation_fn(pre_2)
    act_3 = activation_fn(pre_3)

    # weighted activations
    w_act_1 = phi_1 * act_1
    w_act_2 = phi_2 * act_2
    w_act_3 = phi_3 * act_3

    # output
    y = phi_0 + w_act_1 + w_act_2 + w_act_3

    return y, pre_1, pre_2, pre_3, act_1, act_2, act_3, w_act_1, w_act_2, w_act_3

# -----------------------------
# Plotting
# -----------------------------
def plot_neural(x, y, pre_1, pre_2, pre_3, act_1, act_2, act_3, 
                w_act_1, w_act_2, w_act_3, plot_all=False, x_data=None, y_data=None):

    if plot_all:
        fig, ax = plt.subplots(3,3)
        fig.set_size_inches(8.5, 8.5)
        fig.tight_layout(pad=3.0)

        # Pre-activations
        ax[0,0].plot(x,pre_1,'r-'); ax[0,0].set_ylabel('Preactivation')
        ax[0,1].plot(x,pre_2,'b-'); ax[0,1].set_ylabel('Preactivation')
        ax[0,2].plot(x,pre_3,'g-'); ax[0,2].set_ylabel('Preactivation')

        # Activations
        ax[1,0].plot(x,act_1,'r-'); ax[1,0].set_ylabel('Activation')
        ax[1,1].plot(x,act_2,'b-'); ax[1,1].set_ylabel('Activation')
        ax[1,2].plot(x,act_3,'g-'); ax[1,2].set_ylabel('Activation')

        # Weighted activations
        ax[2,0].plot(x,w_act_1,'r-'); ax[2,0].set_ylabel('Weighted Act')
        ax[2,1].plot(x,w_act_2,'b-'); ax[2,1].set_ylabel('Weighted Act')
        ax[2,2].plot(x,w_act_3,'g-'); ax[2,2].set_ylabel('Weighted Act')

        for plot_y in range(3):
            for plot_x in range(3):
                ax[plot_y,plot_x].set_xlim([0,1]); ax[plot_y,plot_x].set_ylim([-1,1])
                ax[plot_y,plot_x].set_aspect(0.5)
            ax[2,plot_y].set_xlabel('Input, $x$')
        plt.show()

    # Final output
    fig, ax = plt.subplots()
    ax.plot(x,y, 'k-', label="NN output")
    ax.set_xlabel('Input, $x$'); ax.set_ylabel('Output, $y$')
    ax.set_xlim([0,1]); ax.set_ylim([-1,1])
    ax.set_aspect(0.5)

    if x_data is not None:
        ax.plot(x_data, y_data, 'mo', label="Data")
        for i in range(len(x_data)):
            ax.plot(x_data[i], y_data[i])
    ax.legend()
    plt.show()

# -----------------------------
# Example Run
# -----------------------------
theta_10 =  0.3 ; theta_11 = -1.0
theta_20 = -1.0 ; theta_21 = 2.0
theta_30 = -0.5 ; theta_31 = 0.65

phi_0 = -0.3; phi_1 = 2.0; phi_2 = -1.0; phi_3 = 7.0

x = np.arange(0,1,0.01)

y, pre_1, pre_2, pre_3, act_1, act_2, act_3, w_act_1, w_act_2, w_act_3 = \
    shallow_1_1_3(x, ReLU, phi_0,phi_1,phi_2,phi_3, theta_10, theta_11, theta_20, theta_21, theta_30, theta_31)

plot_neural(x, y, pre_1, pre_2, pre_3, act_1, act_2, act_3, w_act_1, w_act_2, w_act_3, plot_all=True)
